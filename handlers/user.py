import re
from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from aiogram.enums import ParseMode

from keybord.user import get_consent_keyboard, get_main_menu_keyboard, choose_group

from core import check_user_by_phone, get_user, add_fio, get_user_history, add_ugroup

from scripts import is_valid_russian_phone, compare_date, display_history, validate_full_name, generate_donor_advice, get_daily_weather, display_weather

dp = Router()


class AuthState(StatesGroup):
    waiting_for_phone = State()
    waiting_for_answer = State()
    waiting_for_right_fio = State()


class RegisterState(StatesGroup):
    fio = State()
    group = State()
    final = State()
    student_group = State()


class InfoState(StatesGroup):
    main_state = State()


@dp.message(Command('authenticate'))
async def authorization(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞...")
    await state.set_state(AuthState.waiting_for_phone)


@dp.message(AuthState.waiting_for_phone)  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def process_phone(message: Message, state: FSMContext):
    phone_number = message.text  # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    if is_valid_russian_phone(phone_number):
        # res = check_admin(message.from_user.id)
        res = check_user_by_phone(phone_number)
        if res:
            name = get_user(message.from_user.id)
            await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name.Fio}! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.',
                                 reply_markup=get_consent_keyboard())

            await state.set_state(AuthState.waiting_for_answer)
        else:
            await message.answer("–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –§–ò–û")
            await state.set_state(RegisterState.fio)
    else:
        await message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!')


@dp.message(AuthState.waiting_for_answer)
async def waiting_for_answer(message: Message, state: FSMContext):
    text = message.text
    if text == '‚ùå –ù–µ—Ç, –Ω–µ–≤–µ—Ä–Ω–æ':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç...')
        await state.set_state(AuthState.waiting_for_right_fio)
    else:
        await message.answer('–û—Ç–ª–∏—á–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é:', reply_markup=get_main_menu_keyboard())
        await state.clear()


@dp.message(AuthState.waiting_for_right_fio)
async def waiting_for_right_fio(message: Message, state: FSMContext):
    text = message.text
    add_fio(message.from_user.id, text)
    await message.answer('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é: /menu')
    await state.clear()


@dp.message(RegisterState.fio)
async def register_fio(message: Message, state: FSMContext):
    fio = message.text
    if validate_full_name(fio):
        add_fio(message.from_user.id, fio)
        await message.answer("–ö—Ç–æ –≤—ã?", reply_markup=choose_group())
        await state.set_state(RegisterState.group)
    else:
        await message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!')


@dp.message(RegisterState.group)
async def define_group(message: Message, state: FSMContext):
    text = message.text
    if text == "üéì–°—Ç—É–¥–µ–Ω—Ç":
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã")
        await state.set_state(RegisterState.student_group)
    if text == "üíº–°–æ—Ç—Ä—É–¥–Ω–∏–∫":
        add_ugroup(message.from_user.id, "–°–æ—Ç—Ä—É–¥–Ω–∏–∫")
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø–∞—Å–∞—Ç—å –∂–∏–∑–Ω–∏!")
        await state.clear()
    if text == "ü§≤–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä":
        add_ugroup(message.from_user.id, "–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä")
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø–∞—Å–∞—Ç—å –∂–∏–∑–Ω–∏!")
        await state.clear()
    pass


@dp.message(RegisterState.student_group)
async def student_group(message: Message, state: FSMContext):
    text = message.text
    add_ugroup(message.from_user.id, text)
    await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø–∞—Å–∞—Ç—å –∂–∏–∑–Ω–∏!")
    await state.clear()


@dp.message(F.text == "üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")
async def show_profile(message: Message, state: FSMContext):
    name = get_user(message.from_user.id)
    history = get_user_history(name.Id)
    date1 = name.LastGavr
    date2 = name.LastFMBA
    date_res, place = compare_date(date1, date2)
    await message.answer(f"""<b>–§–ò–û</b>: {name.Fio}
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–∞—Ü–∏–π:</b> {name.SumCount}
<b>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–Ω–∞—Ü–∏–∏:</b> {date_res}
<b>–ú–µ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–Ω–∞—Ü–∏–∏:</b> {place}
<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ä–µ–≥–∏—Å—Ç—Ä–µ –î–ú–ö:</b> {name.Registry}
<b>–ò—Å—Ç–æ—Ä–∏—è –¥–æ–Ω–∞—Ü–∏–π:</b> 
{display_history(history)}""", parse_mode=ParseMode.HTML)
    await state.clear()


@dp.message(F.text == "üå§ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–æ–Ω–æ—Ä–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
async def show_information(message: Message, state: FSMContext):
    advice = generate_donor_advice(get_daily_weather())
    weather = display_weather(get_daily_weather())
    await message.answer(advice + '\n' + weather)
    await state.clear()


@dp.message(Command('menu'))
async def another_menu_handler(message: Message):
    await message.answer(
        text='–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=get_main_menu_keyboard()
    )
