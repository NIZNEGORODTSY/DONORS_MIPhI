import re
from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime

from keybord.user import events_db
from keybord.user import get_consent_keyboard
from keybord.user import get_donor_types
from keybord.user import get_events_keyboard
from keybord.user import get_main_menu
from keybord.user import get_yes_no_keyboard

donors_db = {}

questions_db = []
user_sessions = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

dp = Router()

# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Registration(StatesGroup):
    phone = State()
    full_name = State()
    donor_type = State()
    group_number = State()
    consent = State()

class Question(StatesGroup):
    text = State()

class EventRegistration(StatesGroup):
    date = State()
    confirm = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã


# –•—ç–Ω–¥–ª–µ—Ä—ã


@dp.message(Registration.phone, F.contact)
async def process_phone(message: Message, state: FSMContext):
    if not message.contact:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏.")
        return
    
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_sessions[message.from_user.id] = {"phone": phone}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    if phone in donors_db:
        donor = donors_db[phone]
        await message.answer(
            f"–ú—ã –≤–∞—Å —É–∑–Ω–∞–ª–∏! –≠—Ç–æ –≤—ã: {donor['full_name']}?",
            reply_markup=get_yes_no_keyboard()
        )
        await state.set_state(Registration.consent)
    else:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(Registration.full_name)

@dp.message(Registration.full_name)
async def process_full_name(message: Message, state: FSMContext):
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –§–ò–û
    if not re.fullmatch(r'^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$', message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):")
        return
    
    await state.update_data(full_name=message.text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_donor_types()
    )
    await state.set_state(Registration.donor_type)

@dp.message(Registration.donor_type, F.text.in_(["–°—Ç—É–¥–µ–Ω—Ç", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä"]))
async def process_donor_type(message: Message, state: FSMContext):
    await state.update_data(donor_type=message.text)
    
    if message.text == "–°—Ç—É–¥–µ–Ω—Ç":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã:")
        await state.set_state(Registration.group_number)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=get_consent_keyboard()
        )
        await state.set_state(Registration.consent)

@dp.message(Registration.group_number)
async def process_group_number(message: Message, state: FSMContext):
    await state.update_data(group_number=message.text)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_consent_keyboard()
    )
    await state.set_state(Registration.consent)

@dp.message(Registration.consent, F.text == "‚úÖ –î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ")
async def process_consent_yes(message: Message, state: FSMContext):
    data = await state.get_data()
    phone = data['phone']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–Ω–æ—Ä–∞ –≤ "–±–∞–∑—É"
    donors_db[phone] = {
        "full_name": data.get('full_name'),
        "donor_type": data['donor_type'],
        "group_number": data.get('group_number', None),
        "donations": [],
        "bmd_registry": False,
        "consent": True,
        "user_id": message.from_user.id  # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
    
    await message.answer(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
        reply_markup=get_main_menu()
    )
    await state.clear()

@dp.message(Registration.consent, F.text == "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è")
async def process_consent_no(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.clear()

@dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = user_sessions.get(message.from_user.id, {})
    phone = user_data.get("phone")
    
    if not phone or phone not in donors_db:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    donor = donors_db[phone]
    last_donation = donor['donations'][-1] if donor['donations'] else None
    
    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"–§–ò–û: {donor['full_name']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {donor['donor_type']}\n"
    )
    
    if donor['donor_type'] == "–°—Ç—É–¥–µ–Ω—Ç":
        profile_text += f"–£—á–µ–±–Ω–∞—è –≥—Ä—É–ø–ø–∞: {donor.get('group_number', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    
    profile_text += (
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–∞—Ü–∏–π: {len(donor['donations'])}\n"
    )
    
    if last_donation:
        profile_text += (
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–Ω–∞—Ü–∏—è: {last_donation['date']} ({last_donation['blood_center']})\n"
        )
    
    profile_text += (
        f"–í —Ä–µ–≥–∏—Å—Ç—Ä–µ –î–ö–ú: {'–î–∞' if donor['bmd_registry'] else '–ù–µ—Ç'}\n\n"
        f"<i>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ–Ω–∞—Ü–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –¥–æ–Ω–∞—Ü–∏–π", callback_data="donation_history"))
    
    await message.answer(profile_text, reply_markup=builder.as_markup())

@dp.callback_query(F.data == "donation_history")
async def show_donation_history(callback: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = user_sessions.get(callback.from_user.id, {})
    phone = user_data.get("phone")
    
    if not phone or phone not in donors_db:
        await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    
    donor = donors_db[phone]
    
    if not donor['donations']:
        await callback.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –¥–æ–Ω–∞—Ü–∏–π.")
        return
    
    history_text = "üìú <b>–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–æ–Ω–∞—Ü–∏–π:</b>\n\n"
    for donation in donor['donations']:
        history_text += f"üìÖ {donation['date']} - {donation['blood_center']}\n"
    
    await callback.message.answer(history_text)

@dp.message(F.text == "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –î–î")
async def show_upcoming_events(message: Message):
    if not events_db:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–Ω–æ—Ä—Å–∫–∏—Ö –¥–Ω–µ–π.")
        return
    
    events_text = "üìÖ <b>–ë–ª–∏–∂–∞–π—à–∏–µ –¥–æ–Ω–æ—Ä—Å–∫–∏–µ –¥–Ω–∏:</b>\n\n"
    for event in events_db:
        events_text += f"üìå {event['date']} - {event['blood_center']}\n"
    
    events_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:"
    
    await message.answer(events_text, reply_markup=get_events_keyboard())

@dp.callback_query(F.data.startswith("event_"))
async def register_for_event(callback: types.CallbackQuery, state: FSMContext):
    date = callback.data.split("_")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = user_sessions.get(callback.from_user.id, {})
    phone = user_data.get("phone")
    
    if not phone or phone not in donors_db:
        await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    
    donor = donors_db[phone]
    
    if donor['donor_type'] == "–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä":
        await callback.message.answer(
            "–î–ª—è –≤–Ω–µ—à–Ω–∏—Ö –¥–æ–Ω–æ—Ä–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://example.com/registration",
            reply_markup=get_main_menu()
        )
    else:
        await state.update_data(date=date)
        await callback.message.answer(
            f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ {date}?",
            reply_markup=get_yes_no_keyboard()
        )
        await state.set_state(EventRegistration.confirm)
    await callback.answer()

@dp.message(EventRegistration.confirm, F.text == "–î–∞")
async def confirm_event_registration(message: Message, state: FSMContext):
    data = await state.get_data()
    date = data['date']
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = user_sessions.get(message.from_user.id, {})
    phone = user_data.get("phone")
    
    if phone and phone in donors_db:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        event = next((e for e in events_db if e['date'] == date), None)
        if event:
            donors_db[phone]['donations'].append({
                "date": date,
                "blood_center": event['blood_center'],
                "completed": False  # –ü–æ–º–µ—Ç–∫–∞ –æ —Ç–æ–º, —á—Ç–æ –¥–æ–Ω–æ—Ä –µ—â–µ –Ω–µ —è–≤–∏–ª—Å—è
            })
    
    await message.answer(
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ {date}!",
        reply_markup=get_main_menu()
    )
    await state.clear()

@dp.message(EventRegistration.confirm, F.text == "–ù–µ—Ç")
async def cancel_event_registration(message: Message, state: FSMContext):
    await message.answer(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_menu()
    )
    await state.clear()

@dp.message(F.text == "‚ÑπÔ∏è –û –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ")
async def show_info_menu(message: Message):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üßë‚Äç‚öïÔ∏è –û –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫—Ä–æ–≤–∏", callback_data="info_blood"))
    builder.add(InlineKeyboardButton(text="ü¶¥ –û –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫–æ—Å—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞", callback_data="info_bmd"))
    builder.add(InlineKeyboardButton(text="üè´ –û –¥–æ–Ω–∞—Ü–∏—è—Ö –≤ –ú–ò–§–ò", callback_data="info_mifi"))
    builder.adjust(1)
    
    await message.answer(
        "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ:</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("info_"))
async def show_info(callback: types.CallbackQuery):
    info_type = callback.data.split("_")[1]
    
    if info_type == "blood":
        text = (
            "üßë‚Äç‚öïÔ∏è <b>–û –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫—Ä–æ–≤–∏:</b>\n\n"
            "–î–æ–Ω–æ—Ä—Å—Ç–≤–æ –∫—Ä–æ–≤–∏ ‚Äî —ç—Ç–æ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–∞—è —Å–¥–∞—á–∞ –∫—Ä–æ–≤–∏ –∏ –µ—ë –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ "
            "–ø–µ—Ä–µ–ª–∏–≤–∞–Ω–∏—è –Ω—É–∂–¥–∞—é—â–∏–º—Å—è –±–æ–ª—å–Ω—ã–º –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤.\n\n"
            "<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–Ω–æ—Ä—É:</b>\n"
            "- –í–æ–∑—Ä–∞—Å—Ç –æ—Ç 18 –ª–µ—Ç\n"
            "- –í–µ—Å –±–æ–ª–µ–µ 50 –∫–≥\n"
            "- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π\n\n"
            "<b>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–æ–Ω–∞—Ü–∏–∏:</b>\n"
            "- –ó–∞ 2 –¥–Ω—è –∏—Å–∫–ª—é—á–∏—Ç—å –∞–ª–∫–æ–≥–æ–ª—å\n"
            "- –ù–∞–∫–∞–Ω—É–Ω–µ —Ö–æ—Ä–æ—à–æ –≤—ã—Å–ø–∞—Ç—å—Å—è\n"
            "- –£—Ç—Ä–æ–º –ª–µ–≥–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫\n"
            "- –ü–∏—Ç—å –±–æ–ª—å—à–µ –∂–∏–¥–∫–æ—Å—Ç–∏"
        )
    elif info_type == "bmd":
        text = (
            "ü¶¥ <b>–û –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫–æ—Å—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞:</b>\n\n"
            "–î–æ–Ω–æ—Ä—Å—Ç–≤–æ –∫–æ—Å—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞ ‚Äî —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ø–∞—Å—Ç–∏ –∂–∏–∑–Ω—å —á–µ–ª–æ–≤–µ–∫—É —Å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º–∏ "
            "–∫—Ä–æ–≤–µ—Ç–≤–æ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.\n\n"
            "<b>–ü—Ä–æ—Ü–µ—Å—Å –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Ä–µ–≥–∏—Å—Ç—Ä:</b>\n"
            "1. –°–¥–∞—á–∞ –ø—Ä–æ–±–∏—Ä–∫–∏ –∫—Ä–æ–≤–∏ –Ω–∞ —Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "2. –í–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä\n"
            "3. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º\n\n"
            "<b>–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–æ–Ω–∞—Ü–∏–∏:</b>\n"
            "- –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–∏—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–µ –≤–µ–Ω—ã (80% —Å–ª—É—á–∞–µ–≤)\n"
            "- –ò–ª–∏ –ø—É—Ç–µ–º –ø—É–Ω–∫—Ü–∏–∏ —Ç–∞–∑–æ–≤–æ–π –∫–æ—Å—Ç–∏ –ø–æ–¥ –Ω–∞—Ä–∫–æ–∑–æ–º"
        )
    elif info_type == "mifi":
        text = (
            "üè´ <b>–û –¥–æ–Ω–∞—Ü–∏—è—Ö –≤ –ú–ò–§–ò:</b>\n\n"
            "–í –ù–ò–Ø–£ –ú–ò–§–ò —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –¥–æ–Ω–æ—Ä—Å–∫–∏–µ –¥–Ω–∏ —Å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ–º "
            "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n\n"
            "<b>–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–Ω–∞—Ü–∏–∏:</b>\n"
            "1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏–ª–∏ –Ω–∞ –º–µ—Å—Ç–µ\n"
            "2. –ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–µ–¥–æ—Å–º–æ—Ç—Ä\n"
            "3. –°–¥–∞—á–∞ –∫—Ä–æ–≤–∏ (–æ–∫–æ–ª–æ 15 –º–∏–Ω—É—Ç)\n"
            "4. –û—Ç–¥—ã—Ö –∏ –ª–µ–≥–∫–∏–π –ø–µ—Ä–µ–∫—É—Å\n\n"
            "–ë–ª–∏–∂–∞–π—à–∏–π –î–î: 15.08.2023 –≤ –¶–ö ‚Ññ1"
        )
    
    await callback.message.answer(text, reply_markup=get_main_menu())
    await callback.answer()

@dp.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def start_question(message: Message, state: FSMContext):
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(Question.text)

@dp.message(Question.text)
async def process_question(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = user_sessions.get(message.from_user.id, {})
    phone = user_data.get("phone")
    
    if phone and phone in donors_db:
        donor_name = donors_db[phone]['full_name']
    else:
        donor_name = "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å
    questions_db.append({
        "user_id": message.from_user.id,
        "user_name": donor_name,
        "phone": phone,
        "text": message.text,
        "date": datetime.now().strftime("%d.%m.%Y %H:%M")
    })
    
    await message.answer(
        "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º. –û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤–∞–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
        reply_markup=get_main_menu()
    )
    await state.clear()