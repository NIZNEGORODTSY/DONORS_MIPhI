import re
from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from aiogram.enums import ParseMode

from keybord.user import get_consent_keyboard, get_main_menu_keyboard, choose_group, get_phone_number_keyboard, \
    get_detailed_information

from core import check_user_by_phone, get_user, add_fio, get_user_history, add_ugroup, add_question, \
    get_upcoming_events, add_registration, add_user, get_questions_by_user

from scripts import is_valid_russian_phone, compare_date, display_history, validate_full_name, generate_donor_advice, \
    get_daily_weather, display_weather, get_restrictions

dp = Router()


class AuthState(StatesGroup):
    waiting_for_phone = State()
    waiting_for_answer = State()
    waiting_for_right_fio = State()


class RegisterState(StatesGroup):
    fio = State()
    group = State()
    final = State()
    student_group = State()


class InfoState(StatesGroup):
    main_state = State()
    detailed_information = State()


class Questions(StatesGroup):
    waiting_for_question = State()


class SignUpForDonation(StatesGroup):
    waiting_for_date = State()


@dp.message(F.text == 'üîê–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è')
async def authorization(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞...", reply_markup=get_phone_number_keyboard())
    await state.set_state(AuthState.waiting_for_phone)


@dp.message(AuthState.waiting_for_phone)  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def process_phone(message: Message, state: FSMContext):
    phone_number = message.contact.phone_number
    # phone_number = '+7 934 324 5456'
    if is_valid_russian_phone(phone_number):
        # res = check_admin(message.from_user.id)
        res = check_user_by_phone(phone_number)
        if res:
            name = get_user(message.from_user.id)
            await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name.Fio}! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.',
                                 reply_markup=get_consent_keyboard())

            await state.set_state(AuthState.waiting_for_answer)
        else:
            await message.answer("–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –§–ò–û")
            add_user(phone_number, message.from_user.id)
            await state.set_state(RegisterState.fio)
    else:
        await message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!')


@dp.message(AuthState.waiting_for_answer)
async def waiting_for_answer(message: Message, state: FSMContext):
    text = message.text
    if text == '‚ùå –ù–µ—Ç, –Ω–µ–≤–µ—Ä–Ω–æ':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç...')
        await state.set_state(AuthState.waiting_for_right_fio)
    else:
        await message.answer('–û—Ç–ª–∏—á–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é:', reply_markup=get_main_menu_keyboard())
        await state.clear()


@dp.message(AuthState.waiting_for_right_fio)
async def waiting_for_right_fio(message: Message, state: FSMContext):
    fio = message.text
    add_fio(message.from_user.id, fio)
    await message.answer('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é: /menu',
                         reply_markup=get_main_menu_keyboard())
    await state.clear()


@dp.message(RegisterState.fio)
async def register_fio(message: Message, state: FSMContext):
    fio = message.text
    if validate_full_name(fio):
        add_fio(message.from_user.id, fio)
        await message.answer("–ö—Ç–æ –≤—ã?", reply_markup=choose_group())
        await state.set_state(RegisterState.group)
    else:
        await message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!')


@dp.message(RegisterState.group)
async def define_group(message: Message, state: FSMContext):
    text = message.text
    if text == "üéì–°—Ç—É–¥–µ–Ω—Ç":
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã")
        await state.set_state(RegisterState.student_group)
    if text == "üíº–°–æ—Ç—Ä—É–¥–Ω–∏–∫":
        add_ugroup(message.from_user.id, "–°–æ—Ç—Ä—É–¥–Ω–∏–∫")
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø–∞—Å–∞—Ç—å –∂–∏–∑–Ω–∏!", reply_markup=get_main_menu_keyboard())
        await state.clear()
    if text == "ü§≤–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä":
        add_ugroup(message.from_user.id, "–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä")
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø–∞—Å–∞—Ç—å –∂–∏–∑–Ω–∏!", reply_markup=get_main_menu_keyboard())
        await state.clear()


@dp.message(RegisterState.student_group)
async def student_group(message: Message, state: FSMContext):
    text = message.text
    add_ugroup(message.from_user.id, text)
    await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø–∞—Å–∞—Ç—å –∂–∏–∑–Ω–∏!", reply_markup=get_main_menu_keyboard())
    await state.clear()


@dp.message(F.text == "üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")
async def show_profile(message: Message, state: FSMContext):
    name = get_user(message.from_user.id)
    history = get_user_history(name.Id)
    date1 = name.LastGavr
    date2 = name.LastFMBA
    date_res, place = compare_date(date1, date2)
    NAME = name.Fio
    AMOUNT = name.SumCount
    REGISTRY = name.Registry
    if AMOUNT is None:
        AMOUNT = 0
    if REGISTRY is None:
        REGISTRY = 0
    await message.answer(f"""<b>–§–ò–û</b>: {NAME}
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–∞—Ü–∏–π:</b> {AMOUNT}
<b>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–Ω–∞—Ü–∏–∏:</b> {date_res}
<b>–ú–µ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–Ω–∞—Ü–∏–∏:</b> {place}
<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ä–µ–≥–∏—Å—Ç—Ä–µ –î–ú–ö:</b> {REGISTRY}
<b>–ò—Å—Ç–æ—Ä–∏—è –¥–æ–Ω–∞—Ü–∏–π:</b> 
{display_history(history)}""", parse_mode=ParseMode.HTML)
    await state.clear()


@dp.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–æ–Ω–∞—Ü–∏—é")
async def sign_up_for_donation(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –º–µ—Å—Ç–æ, —É–∫–∞–∑–∞–≤ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞.")
    data = get_upcoming_events()
    events = ''
    for event in data:
        events += f'{event.Id})–ú–µ—Å—Ç–æ: {event.DonPlace}, –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {event.DonDate}.\n'
    await message.answer(events)

    await state.set_state(SignUpForDonation.waiting_for_date)


@dp.message(SignUpForDonation.waiting_for_date)
async def waiting_for_date(message: Message, state: FSMContext):
    data = get_upcoming_events()
    max_id = 1
    for event in data:
        max_id += 1

    chose = message.text
    if chose.isdigit() and 1 <= int(chose) <= max_id:
        res = ''
        MAX = 0
        for event in data:
            if event.Id == int(chose):
                res = f'–º–µ—Å—Ç–æ: {event.DonPlace}, –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {event.DonDate}.'
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n{res}", reply_markup=get_main_menu_keyboard())
        uid = get_user(message.from_user.id).Id
        add_registration(chose, uid)
        await message.answer(f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã‚úÖ", reply_markup=get_main_menu_keyboard())
        # –ó–î–ï–°–¨ –ë–£–î–ï–¢ –§–£–ù–¶–ö–ò–Ø –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ó–ê–ü–ò–°–ò –í –ë–î
    else:
        await message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')


@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ")
async def info_about_donation(message: Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª', reply_markup=get_detailed_information())
    await state.set_state(InfoState.detailed_information)


@dp.message(InfoState.detailed_information)
async def info_about_donation(message: Message, state: FSMContext):
    text = message.text
    if text == "üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é!", reply_markup=get_main_menu_keyboard())
        await state.clear()
        text = ""
    await message.answer(get_restrictions(f"{text}"))


@dp.message(F.text == "üå§ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–æ–Ω–æ—Ä–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
async def show_information(message: Message, state: FSMContext):
    advice = generate_donor_advice(get_daily_weather())
    weather = display_weather(get_daily_weather())
    await message.answer(advice + '\n' + weather)
    await state.clear()


@dp.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def show_information(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
    await state.set_state(Questions.waiting_for_question)


@dp.message(Questions.waiting_for_question)
async def waiting_for_questions(message: Message, state: FSMContext):
    question = message.text
    uid = get_user(message.from_user.id).Id
    add_question(uid, question)
    await state.clear()
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –ù–∞—à–∏ –∞–¥–º–∏–Ω—ã –æ—Ç–≤–µ—Ç—è—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                         reply_markup=get_main_menu_keyboard())


@dp.message(F.text == "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã")
async def show_profile(message: Message, state: FSMContext):
    #–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 408,409
    y = get_questions_by_user(get_user(message.from_user.id).Id)
    k=1
    for i in y:
        if (i.HasReply == 1) and (i.IsSeen == 0):
            await message.answer(str(k)+"\n"+i.Answer, reply_markup=get_main_menu_keyboard())
            k+=1
            #print(get_question(x).Id, get_question(x).Uid, get_question(x).QuestionMsg, get_question(x).HasReply, get_question(x).IsSeen, get_question(x).Answer)
    await state.clear()


@dp.message(Command('menu'))
async def another_menu_handler(message: Message):
    await message.answer(
        text='–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=get_main_menu_keyboard()
    )
