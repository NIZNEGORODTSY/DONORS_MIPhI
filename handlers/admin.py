from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
import pandas as pd
import io
import os

from keybord.admin import get_broadcast_categories_keyboard
from keybord.admin import get_info_sections_keyboard
from keybord.admin import get_organizer_keyboard
from keybord.admin import get_donor_type_keyboard
from keybord.admin import get_yes_no_keyboard

from core import add_donor, add_question_ans, get_donor, export_excel
from dbapi import get_all_questions

from keybord.user import choose_group

donors_db = []
events_db = []
questions_db = []

dp = Router()


class DonorForm(StatesGroup):
    full_name = State()
    uggroup = State()
    student_group = State()
    event_date = State()


class EventForm(StatesGroup):
    date = State()
    blood_center = State()


class AnswerForm(StatesGroup):
    answer = State()
    question_id = State()


class BroadcastForm(StatesGroup):
    category = State()
    message = State()


class EditInfoForm(StatesGroup):
    section = State()
    new_text = State()


@dp.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –¥–æ–Ω–æ—Ä–∞")
async def add_donor_start(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é"), KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    ))


@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é")
async def add_donor_manually(message: Message, state: FSMContext):
    await state.set_state(DonorForm.full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–æ–Ω–æ—Ä–∞:", reply_markup=types.ReplyKeyboardRemove())


@dp.message(DonorForm.full_name)
async def process_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(DonorForm.uggroup)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–Ω–æ—Ä–∞:", reply_markup=choose_group())


@dp.message(DonorForm.uggroup, F.text.in_(["üíº–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "ü§≤–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä", "üéì–°—Ç—É–¥–µ–Ω—Ç"]))
async def process_donor_type(message: Message, state: FSMContext):
    text = message.text
    if text == "üíº–°–æ—Ç—Ä—É–¥–Ω–∏–∫":
        await state.update_data(donor_type='–°–æ—Ç—Ä—É–¥–Ω–∏–∫')
        await message.answer("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –≤ –î–ö–ú?")
        await state.set_state(DonorForm.event_date)
    elif text == "ü§≤–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä":
        await state.update_data(donor_type='–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä')
        await message.answer("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –≤ –î–ö–ú?")
        await state.set_state(DonorForm.event_date)
    elif text == 'üéì–°—Ç—É–¥–µ–Ω—Ç':
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã")
        await state.set_state(DonorForm.student_group)
    

@dp.message(DonorForm.student_group)
async def student_group(message: Message, state: FSMContext):
    text = message.text
    await state.update_data(donor_type=text)
    await message.answer("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –≤ –î–ö–ú?")
    await state.set_state(DonorForm.event_date)


@dp.message(DonorForm.event_date)
async def process_event_date(message: Message, state: FSMContext):
    text = message.text
    data = await state.get_data()
    add_donor(data['full_name'], data['donor_type'], text)
    await message.answer(f"–î–æ–Ω–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_organizer_keyboard())
    await state.clear()


@dp.message(F.text == "üìÖ –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def create_event_start(message: Message, state: FSMContext):
    await state.set_state(EventForm.date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=types.ReplyKeyboardRemove())


@dp.message(EventForm.date)
async def process_event_date(message: Message, state: FSMContext):
    await state.update_data(date=message.text)
    await state.set_state(EventForm.blood_center)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –∫—Ä–æ–≤–∏:")


@dp.message(EventForm.blood_center)
async def process_event_blood_center(message: Message, state: FSMContext):
    data = await state.update_data(blood_center=message.text)
    await state.clear()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ "–±–∞–∑—É"
    events_db.append(data)

    await message.answer(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ {data['date']} –≤ {data['blood_center']} —Å–æ–∑–¥–∞–Ω–æ!",
                         reply_markup=get_organizer_keyboard())


@dp.message(F.text == "‚ùì –í–æ–ø—Ä–æ—Å—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def show_questions(message: Message, state: FSMContext):
    k=0
    for i in get_all_questions():
        if i[3]==False:
            k+=1
    await message.answer("–í—Å–µ–≥–æ " + str(k) + " –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ")
    await state.set_state(AnswerForm.answer)

@dp.message(AnswerForm.answer)
async def process_answer(message: Message, state: FSMContext):
    text = message.text
    k=1
    for i in get_all_questions():
        print(i,k)
        if i[3]==0:
            if str(k) == text:
                print("eee")
                await message.answer(str(i[2])+ "\n–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
                break
            else:
                k+=1
    
    await state.update_data(id_q=str(i[0]))
    await state.set_state(AnswerForm.question_id)

@dp.message(AnswerForm.question_id)
async def process_answer(message: Message, state: FSMContext):
    text = message.text
    data = await state.get_data()
    id_q = data['id_q']
    add_question_ans(id_q, text)
    await message.answer("–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω", reply_markup=get_organizer_keyboard())
    await state.clear()


@dp.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(message: Message, state: FSMContext):
    await state.set_state(BroadcastForm.category)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=get_broadcast_categories_keyboard())


@dp.message(BroadcastForm.category)
async def process_broadcast_category(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    await state.set_state(BroadcastForm.message)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=types.ReplyKeyboardRemove())


@dp.message(BroadcastForm.message)
async def process_broadcast_message(message: Message, state: FSMContext):
    data = await state.get_data()
    category = data['category']

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    # –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    await state.clear()


@dp.message(F.text == "–°–∫–∞—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def edit_info_start(message: Message, state: FSMContext):
    export_excel()
    file_path_1 = "export/questions.xlsx"
    file_path_2 = "export/upcoming_events.xlsx"
    
    if not os.path.exists(file_path_1):
        await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    file = FSInputFile(file_path_1)
    await message.answer_document(
        document=file,
        caption="–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç"
    )
    if not os.path.exists(file_path_2):
        await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    file = FSInputFile(file_path_2)
    await message.answer_document(
        document=file,
        caption="–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç"
    )
    await message.answer("–í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω—è—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")



@dp.message(F.text == "üìÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–Ω–æ—Ä–µ")
async def edit_info_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–Ω–æ—Ä–∞, –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å")
    await state.set_state(EditInfoForm.section)





@dp.message(EditInfoForm.section)
async def process_info_section(message: Message, state: FSMContext):
    text = message.text
    x = get_donor(text)
    print(x)
    await message.answer("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∏—Ö")
    """###await message.answer(str(x.Id)+'\n'
                         +str(x.Fio)+'\n'
                         +str(x.Group)+'\n'
                         +str(x.CountGavr)+'\n'
                         +str(x.CountFMBA)+'\n'
                         +str(x.SumCount)+'\n'
                         +str(x.LastGavr)+'\n'
                         +str(x.LastFMBA)+'\n'
                         +str(x.Contacts)+'\n'
                         +str(x.PhoneNumber)+'\n'
                         +str(x.IsAdmin)+'\n'
                         +str(x.Registry)+'\n'
                         +str(x.Tgid)+'\n')"""
    await state.set_state(EditInfoForm.new_text)


@dp.message(EditInfoForm.new_text)
async def process_new_info_text(message: Message, state: FSMContext):
    text=message.text
    print(text)
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    await message.answer(f"–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=get_organizer_keyboard())
    await state.clear()


@dp.message(F.text == "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def upload_stats(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π:")


@dp.message(F.document)
async def handle_document(message: Message):
    doc = message.document
    if doc.file_name.endswith('.xlsx') or doc.file_name.endswith('.xls'):
        await message.answer(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls)")


@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    await message.answer("https://datalens.yandex/g7boh897u39y1")


@dp.callback_query(F.data == "export_stats")
async def export_stats(callback: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
    data = []
    for donor in donors_db:
        data.append({
            "–§–ò–û": donor['full_name'],
            "–î–∞—Ç–∞ –∞–∫—Ü–∏–∏": donor['event_date'],
            "–¶–µ–Ω—Ç—Ä –∫—Ä–æ–≤–∏": donor['blood_center'],
            "–¢–∏–ø –¥–æ–Ω–æ—Ä–∞": donor['donor_type'],
            "–°–¥–∞–ª –∫—Ä–æ–≤—å": "–î–∞" if donor['donated_blood'] else "–ù–µ—Ç",
            "–°–¥–∞–ª –ø—Ä–æ–±–∏—Ä–∫—É": "–î–∞" if donor['donated_tube'] else "–ù–µ—Ç"
        })

    df = pd.DataFrame(data)

    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')

    output.seek(0)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    await callback.message.answer_document(
        types.BufferedInputFile(output.read(), filename="donor_stats.xlsx"),
        caption="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–Ω–æ—Ä–∞–º"
    )


@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def back_to_menu(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_organizer_keyboard())
