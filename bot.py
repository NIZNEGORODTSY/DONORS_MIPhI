from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, BotCommand, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import Message
import logging
import asyncio
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import config.reader as reader
import sys
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Contact
)
import asyncio

from core import check_admin, check_user_by_phone, get_user, add_fio, get_user_history, add_ugroup

from scripts import is_valid_russian_phone, compare_date, display_history, validate_full_name, generate_donor_advice, get_daily_weather

reader.read_config()

TOKEN = reader.get_param_value('token')

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)


class AuthState(StatesGroup):
    waiting_for_phone = State()
    waiting_for_answer = State()
    waiting_for_right_fio = State()


class RegisterState(StatesGroup):
    fio = State()
    group = State()
    student_group = State()
    final = State


class InfoState(StatesGroup):
    main_state = State()


def get_consent_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ")],
            [KeyboardButton(text="‚ùå –ù–µ—Ç, –Ω–µ–≤–µ—Ä–Ω–æ")]
        ],
        resize_keyboard=True
    )


def choose_group():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéì–°—Ç—É–¥–µ–Ω—Ç")],
            [KeyboardButton(text="üíº–°–æ—Ç—Ä—É–¥–Ω–∏–∫")],
            [KeyboardButton(text="ü§≤–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä")],
        ],
        resize_keyboard=True
    )


def get_main_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")],
            [KeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–æ–Ω–∞—Ü–∏—é")],
            [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ")],
            [KeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")]
        ],
        resize_keyboard=True
    )


@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer(f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}! üëã –Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–æ–Ω–æ—Ä—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –ú–ò–§–ò.

–ú–æ—è —Ü–µ–ª—å:
‚úÖ –£–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –î–Ω–∏ –î–æ–Ω–æ—Ä–∞
‚úÖ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫—Ä–æ–≤–∏ –∏ –∫–æ—Å—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞
‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–∞—Ç–∞—Ö –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–æ–≤

–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å?
üîπ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–¥–∞—á—É –∫—Ä–æ–≤–∏ –∑–∞ 2 –º–∏–Ω—É—Ç—ã
üîπ –£–∑–Ω–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–Ω–æ—Ä–∞–º –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É
üîπ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é –¥–æ–Ω–∞—Ü–∏–π
üîπ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º""")

    await message.answer(f"""<b><i>–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</i></b>
------------------------------------
<b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>
–ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–§–ò–û, –∫–æ–Ω—Ç–∞–∫—Ç—ã, –¥–∞–Ω–Ω—ã–µ –¥–æ–Ω–æ—Ä—Å–∫–æ–π –∞–Ω–∫–µ—Ç—ã) –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–æ–Ω–∞—Ü–∏—é –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥–æ–Ω–æ—Ä—Å–∫–∏–º —Ü–µ–Ω—Ç—Ä–æ–º –ú–ò–§–ò.

<b>–†–∞—Å—Å—ã–ª–∫–∞</b>
–ë–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–æ–≤, –¥–æ–Ω–æ—Ä—Å–∫–∏—Ö –∞–∫—Ü–∏—è—Ö –∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö —Ü–µ–Ω—Ç—Ä–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /stop.

<b>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</b>
–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –∑–∞—â–∏—â—ë–Ω–Ω–æ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º –±–µ–∑ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è.

!!!–ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å —ç—Ç–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏!!!""", parse_mode=ParseMode.HTML)

    await message.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /authenticate –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é ‚Üì")


@dp.message(Command('authenticate'))
async def authorization(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞...")
    await state.set_state(AuthState.waiting_for_phone)


@dp.message(AuthState.waiting_for_phone)  # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def process_phone(message: Message, state: FSMContext):
    phone_number = message.text  # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    if is_valid_russian_phone(phone_number):
        res = check_admin(message.from_user.id)
        if res is False: #–ë–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ì
            await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
        else:
            res = check_user_by_phone(phone_number)
            if res:
                name = get_user(message.from_user.id)
                await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name.Fio}! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.',
                                     reply_markup=get_consent_keyboard())

                await state.set_state(AuthState.waiting_for_answer)
            else:
                await message.answer("–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –§–ò–û")
                await state.set_state(RegisterState.fio)
    else:
        await message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!')


@dp.message(AuthState.waiting_for_answer)
async def waiting_for_answer(message: Message, state: FSMContext):
    text = message.text
    if text == '‚ùå –ù–µ—Ç, –Ω–µ–≤–µ—Ä–Ω–æ':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç...')
        await state.set_state(AuthState.waiting_for_right_fio)
    else:
        await message.answer('–û—Ç–ª–∏—á–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é: /menu')
        await state.clear()


@dp.message(AuthState.waiting_for_right_fio)
async def waiting_for_right_fio(message: Message, state: FSMContext):
    text = message.text
    add_fio(message.from_user.id, text)
    await message.answer('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é: /menu')
    await state.clear()


@dp.message(RegisterState.fio)
async def register_fio(message: Message, state: FSMContext):
    fio = message.text
    if validate_full_name(fio):
        add_fio(message.from_user.id, fio)
        await message.answer("–ö—Ç–æ –≤—ã?", reply_markup=choose_group())
        await state.set_state(RegisterState.group)
    else:
        await message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!')


@dp.message(RegisterState.group)
async def define_group(message: Message, state: FSMContext):
    text = message.text
    if text == "üéì–°—Ç—É–¥–µ–Ω—Ç":
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã")
        state.set_state(RegisterState.student_group)
    if text == "üíº–°–æ—Ç—Ä—É–¥–Ω–∏–∫":
        add_ugroup(message.from_user.id, "–°–æ—Ç—Ä—É–¥–Ω–∏–∫")
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø–∞—Å–∞—Ç—å –∂–∏–∑–Ω–∏!")
        await state.clear()
    if text == "ü§≤–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä":
        add_ugroup(message.from_user.id, "–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä")
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø–∞—Å–∞—Ç—å –∂–∏–∑–Ω–∏!")
        await state.clear()
    pass


@dp.message(RegisterState.student_group)
async def student_group(message: Message, state: FSMContext):
    text = message.text
    add_ugroup(message.from_user.id, text)
    await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø–∞—Å–∞—Ç—å –∂–∏–∑–Ω–∏!")
    await state.clear()


@dp.message(F.text == "üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")
async def show_profile(message: Message):
    name = get_user(message.from_user.id)
    history = get_user_history(name.Id)
    date1 = name.LastGavr
    date2 = name.LastFMBA
    date_res, place = compare_date(date1, date2)
    await message.answer(f"""<b>–§–ò–û</b>: {name.Fio}
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–Ω–∞—Ü–∏–π:</b> {name.SumCount}
<b>–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–Ω–∞—Ü–∏–∏:</b> {date_res}
<b>–ú–µ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–Ω–∞—Ü–∏–∏:</b> {place}
<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ä–µ–≥–∏—Å—Ç—Ä–µ –î–ú–ö:</b> {name.Registry}
<b>–ò—Å—Ç–æ—Ä–∏—è –¥–æ–Ω–∞—Ü–∏–π:</b> 
{display_history(history)}""", parse_mode=ParseMode.HTML)


@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ")
async def show_information(message: Message):
    await message.answer(generate_donor_advice(get_daily_weather()))


@dp.message(Command('menu'))
async def another_menu_handler(message: Message):
    await message.answer(
        text='–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=get_main_menu_keyboard()
    )


async def main():
    await bot.set_my_commands([
        BotCommand(command='start', description='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'),
        BotCommand(command='menu', description='–ú–µ–Ω—é'),
        BotCommand(command='authenticate', description='–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è')
    ])

    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
